<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <context:component-scan base-package="com.global.biz"></context:component-scan>
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
   
   <!--  DataSource 설정 -->
   <context:property-placeholder location="classpath:config/database.properties" />
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
      <property name="driverClassName" value="${jdbc.driver}" />
      <property name="url" value="${jdbc.url}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />  
   </bean>
   
   
   <!-- Spring Jdbc 설정 -->
   <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
         <property name="dataSource" ref="dataSource"></property>
   </bean>
   
   <!--  Transaction 설정 -->
   <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource"></property>
   </bean>
   
   <!-- <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="dataSource"></property>
          <property name="configLocation" value="classpath:sql-map-config.xml"></property>   
   </bean> -->
   
   <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="dataSource" ref="dataSource"></property>
          <property name="configLocation" value="classpath:sql-map-config.xml"></property>
   </bean>
   
   
   <bean class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg ref="sqlSession"></constructor-arg>
   </bean>
   
   
   
   
   <tx:advice id="txAdvice" transaction-manager="txManager">
          <tx:attributes>
                <tx:method name="get*" read-only="true"/>
                <tx:method name="*"/>
          </tx:attributes>  
   </tx:advice>
   
   
   <aop:config>
   
      <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="txPointcut" />
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
   </aop:config>
   
   
   
   
   
  <!--  
   
   
   <bean id="before" class="com.global.biz.common.BeforeAdvice"></bean>
   <bean id="afterReturning" class="com.global.biz.common.AfterReturningAdvice"></bean>
   <bean id="afterThrowing" class="com.global.biz.common.AfterThrowingAdvice"></bean>
   <bean id="after" class="com.global.biz.common.AfterAdvice"></bean>
   <bean id="around" class="com.global.biz.common.AroundAdvice"></bean>
   
   
   <aop:config>
        
        <aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut" />
        <aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut" />
         
         
          <aop:aspect ref="around">
                   <aop:around method="aroundLog"  pointcut-ref="allPointcut"/>        
         </aop:aspect> 
         
         
         
         <aop:aspect ref="afterThrowing">
                   <aop:after-throwing method="exceptionLog" throwing="exceptionObj" pointcut-ref="allPointcut"/>        
          </aop:aspect> 
          
         <aop:aspect ref="after">
                   <aop:after method="finallyLog" pointcut-ref="allPointcut"/>        
         </aop:aspect>       
         
         
         
          <aop:aspect ref="before">
                   <aop:before method="beforeLog" pointcut-ref="allPointcut"/>        
         </aop:aspect>       
         
          <aop:aspect ref="afterReturning">
                   <aop:after-returning method="afterLog" returning="returnObj"  pointcut-ref="getPointcut"/>        
         </aop:aspect> 
         
   
   </aop:config>
    -->
   
   
   
   
   
   
   
   
   
     
</beans>
